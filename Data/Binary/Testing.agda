{-# OPTIONS --cubical #-}

module Data.Binary.Testing where

open import Data.Binary.Increment
open import Data.Binary.Definition
open import Agda.Builtin.List
open import Data.Binary.Helpers
open import Agda.Builtin.Strict

force : ๐น โ ๐น
force 0แต = 0แต
force (1แต xs) = primForce (force xs) 1แต_
force (2แต xs) = primForce (force xs) 2แต_

incโฒ : ๐น โ ๐น
incโฒ 0แต = 1แต 0แต
incโฒ (1แต xs) = 2แต xs
incโฒ (2แต xs) = primForce (incโฒ xs) 1แต_

up-to : โ โ List ๐น
up-to = go 0แต
  where
  go : ๐น โ โ โ List ๐น
  go i zero    = []
  go i (suc n) = primForce i ฮป i โ i โท go (incโฒ i) n

up-toโฒ : โ โ List โ
up-toโฒ = go zero
  where
  go : โ โ โ โ List โ
  go i zero = []
  go i (suc n) = i โท go (suc i) n

module _ {A : Set} (f : A โ A โ A) where
  combโฒ : A โ List A โ List A โ List A
  combโฒ x []       zs = zs
  combโฒ x (y โท ys) zs = f x y โท combโฒ x ys zs

  comb : List A โ List A โ List A
  comb []       ys = []
  comb (x โท xs) ys = combโฒ x ys (comb xs ys)

forces : List ๐น โ List ๐น
forces [] = []
forces (x โท xs) = primForce (force x) ฮป xโฒ โ primForce (forces xs) ฮป xsโฒ โ xโฒ โท xsโฒ

open import Data.Binary.Conversion.Fast
open import Data.Binary.Properties.Helpers using (_โก_; refl) public

perf-test : (๐น โ ๐น โ ๐น) โ โ โ Set
perf-test f n = comb f (up-to n) (up-to n) โก forces (comb f (up-to n) (up-to n))

map : {A B : Set} โ (A โ B) โ List A โ List B
map _ [] = []
map f (x โท xs) = f x โท map f xs

test : (๐น โ ๐น โ ๐น) โ (โ โ โ โ โ) โ โ โ Set
test f g n =
  let xs = comb f (up-to n) (up-to n)
      ys = comb g (up-toโฒ n) (up-toโฒ n)
  in xs โก forces (map โฆ_โโง ys)
