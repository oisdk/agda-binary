{-# OPTIONS --without-K --safe #-}

module Data.Binary.NonZero.Proofs.Unary where

open import Relation.Binary.PropositionalEquality
open import Data.Binary.NonZero.Operations.Unary
open import Data.Binary.NonZero.Definitions
open import Data.Binary.NonZero.Operations.Semantics
open import Data.Nat as ‚Ñï using (‚Ñï; suc; zero)
open import Relation.Binary.PropositionalEquality.FasterReasoning
import Data.Nat.Properties as ‚Ñï
open import Function

inc‚Å∫‚Å∫-homo : ‚àÄ xs ‚Üí ‚ü¶ inc‚Å∫‚Å∫ xs ‚áì‚üß‚Å∫ ‚â° suc ‚ü¶ xs ‚áì‚üß‚Å∫
inc‚Å∫‚Å∫-homo 1‚Å∫ = refl
inc‚Å∫‚Å∫-homo (0‚Å∫‚à∑ xs) = refl
inc‚Å∫‚Å∫-homo (1‚Å∫‚à∑ xs) =
  begin
    2* ‚ü¶ inc‚Å∫‚Å∫ xs ‚áì‚üß‚Å∫
  ‚â°‚ü® cong 2*_ (inc‚Å∫‚Å∫-homo xs) ‚ü©
    2* (suc ‚ü¶ xs ‚áì‚üß‚Å∫)
  ‚â°‚ü®‚ü©
    (suc ‚ü¶ xs ‚áì‚üß‚Å∫) ‚Ñï.+ suc ‚ü¶ xs ‚áì‚üß‚Å∫
  ‚â°‚ü® ‚Ñï.+-suc (suc ‚ü¶ xs ‚áì‚üß‚Å∫) ‚ü¶ xs ‚áì‚üß‚Å∫ ‚ü©
    suc (suc (2* ‚ü¶ xs ‚áì‚üß‚Å∫))
  ‚àé

inc-homo : ‚àÄ x ‚Üí ‚ü¶ inc x ‚áì‚üß ‚â° suc ‚ü¶ x ‚áì‚üß
inc-homo 0·µá = refl
inc-homo (0< xs) = inc‚Å∫‚Å∫-homo xs

data IncView : ùîπ ‚Üí Set where
  ùîπzero : IncView 0·µá
  ùîπsuc  : ‚àÄ xs ‚Üí IncView xs ‚Üí IncView (inc xs)

open import Data.Product

‚ü¶x‚áì‚üß‚Å∫‚â°suc : ‚àÄ x ‚Üí ‚àÉ[ n ] (‚ü¶ x ‚áì‚üß‚Å∫ ‚â° suc n)
‚ü¶x‚áì‚üß‚Å∫‚â°suc 1‚Å∫ = 0 , refl
‚ü¶x‚áì‚üß‚Å∫‚â°suc (1‚Å∫‚à∑ x) = 2* ‚ü¶ x ‚áì‚üß‚Å∫ , refl
‚ü¶x‚áì‚üß‚Å∫‚â°suc (0‚Å∫‚à∑ x) with ‚ü¶x‚áì‚üß‚Å∫‚â°suc x
‚ü¶x‚áì‚üß‚Å∫‚â°suc (0‚Å∫‚à∑ x) | fst , snd = suc (2* fst) , (cong 2*_ snd ‚ü® trans ‚ü© (‚Ñï.+-suc (suc fst) _))

‚ü¶x‚áì‚üß‚Å∫‚â¢0 : ‚àÄ x ‚Üí ‚ü¶ x ‚áì‚üß‚Å∫ ‚â¢ 0
‚ü¶x‚áì‚üß‚Å∫‚â¢0 x x‚â°0 with ‚ü¶x‚áì‚üß‚Å∫‚â°suc x
‚ü¶x‚áì‚üß‚Å∫‚â¢0 x x‚â°0 | _ , prf with sym x‚â°0 ‚ü® trans ‚ü© prf
‚ü¶x‚áì‚üß‚Å∫‚â¢0 x x‚â°0 | _ , prf | ()

open import Data.Empty

inc-dec : ‚àÄ xs ‚Üí inc‚Å∫ (dec‚Å∫ xs) ‚â° xs
inc-dec 1‚Å∫ = refl
inc-dec (1‚Å∫‚à∑ xs) = refl
inc-dec (0‚Å∫‚à∑ xs) with inc-dec xs | dec‚Å∫ xs | inspect dec‚Å∫ xs
inc-dec (0‚Å∫‚à∑ xs) | prf | 0·µá | [ prf‚ÇÇ ] = cong 0‚Å∫‚à∑_ (sym (cong inc‚Å∫ prf‚ÇÇ) ‚ü® trans ‚ü© prf)
inc-dec (0‚Å∫‚à∑ xs) | prf | 0< x | [ prf‚ÇÇ ] = cong 0‚Å∫‚à∑_ (sym (cong inc‚Å∫ prf‚ÇÇ) ‚ü® trans ‚ü© prf)

inc-view : ‚àÄ xs ‚Üí IncView xs
inc-view xs = go _ xs (inspect ‚ü¶_‚áì‚üß xs)
  where
  go : ‚àÄ n xs ‚Üí Reveal ‚ü¶_‚áì‚üß ¬∑ xs is n ‚Üí IncView xs
  go n 0·µá p = ùîπzero
  go zero (0< x) [ p ] = ‚ä•-elim (‚ü¶x‚áì‚üß‚Å∫‚â¢0 x p)
  go (suc n) (0< xs) [ p ] = subst IncView (cong 0<_ (inc-dec xs)) (ùîπsuc (dec‚Å∫ xs) (go n (dec‚Å∫ xs) [ ‚Ñï.suc-injective (sym (inc-homo (dec‚Å∫ xs)) ‚ü® trans ‚ü© (cong ‚ü¶_‚áì‚üß‚Å∫ (inc-dec xs) ‚ü® trans ‚ü© p)) ]))
