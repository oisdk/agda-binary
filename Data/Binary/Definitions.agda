{-# OPTIONS --without-K --safe #-}

module Data.Binary.Definitions where

open import Data.Nat as ‚Ñï using (‚Ñï; suc; zero)

infixr 5 _0&_ _1&_ B‚ÇÄ_ B‚ÇÅ_ 0<_

-- A "maybe"-like type, specialised here because I have a
-- suspicion it's more efficient.
data 0‚â§_ (A : Set) : Set where
  0‚ÇÇ  : 0‚â§ A
  0<_ : A ‚Üí 0‚â§ A

mutual
  record ùîπ‚ÇÄ : Set where
    constructor _0&_
    inductive
    field
      zeroes : ‚Ñï
      tail‚ÇÅ : ùîπ‚ÇÅ

  record ùîπ‚ÇÅ : Set where
    constructor _1&_
    inductive
    field
      ones : ‚Ñï
      tail‚ÇÄ : 0‚â§  ùîπ‚ÇÄ
open ùîπ‚ÇÄ public
open ùîπ‚ÇÅ public

data ùîπ‚Å∫ : Set where
  B‚ÇÄ_ : ùîπ‚ÇÄ ‚Üí ùîπ‚Å∫
  B‚ÇÅ_ : ùîπ‚ÇÅ ‚Üí ùîπ‚Å∫

ùîπ : Set
ùîπ = 0‚â§ ùîπ‚Å∫

infixr 5 suc‚ÇÄ_ suc‚ÇÅ_
suc‚ÇÄ_ : ùîπ‚ÇÄ ‚Üí ùîπ‚ÇÄ
zeroes (suc‚ÇÄ xs) = suc (zeroes xs)
tail‚ÇÅ  (suc‚ÇÄ xs) = tail‚ÇÅ xs

suc‚ÇÅ_ : ùîπ‚ÇÅ ‚Üí ùîπ‚ÇÅ
ones  (suc‚ÇÅ xs) = suc (ones xs)
tail‚ÇÄ (suc‚ÇÅ xs) = tail‚ÇÄ xs
