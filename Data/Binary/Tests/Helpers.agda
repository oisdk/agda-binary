{-# OPTIONS --without-K --safe #-}

module Data.Binary.Tests.Helpers where

open import Data.Binary.Definitions
open import Data.Binary.Operations.Semantics
open import Data.List as List
open import Relation.Binary.PropositionalEquality
open import Data.Nat
open import Function
open import Data.Product

‚àÄ‚ü®‚Ñï‚ü©<_‚à∂_‚âê_ : ‚Ñï ‚Üí (ùîπ ‚Üí ùîπ) ‚Üí (‚Ñï ‚Üí ‚Ñï) ‚Üí Set
‚àÄ‚ü®‚Ñï‚ü©< n ‚à∂ ùîπf ‚âê ‚Ñïf = let xs = List.upTo n in List.map (‚ü¶_‚áì‚üß ‚àò ùîπf ‚àò ‚ü¶_‚áë‚üß) xs ‚â° List.map ‚Ñïf xs

‚àÄ‚ü®‚Ñï‚ü©‚ÇÇ<_‚à∂_‚âê_ : ‚Ñï ‚Üí (ùîπ ‚Üí ùîπ ‚Üí ùîπ) ‚Üí (‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï) ‚Üí Set
‚àÄ‚ü®‚Ñï‚ü©‚ÇÇ< n ‚à∂ ùîπf ‚âê ‚Ñïf = List.map (Œª { (x , y) ‚Üí ‚ü¶ ùîπf ‚ü¶ x ‚áë‚üß ‚ü¶ y ‚áë‚üß ‚áì‚üß }) ys ‚â° List.map (uncurry ‚Ñïf) ys
  where
  xs : List ‚Ñï
  xs = List.upTo n

  ys : List (‚Ñï √ó ‚Ñï)
  ys = List.concatMap (Œª x ‚Üí List.map (x ,_) xs) xs
