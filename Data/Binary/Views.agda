{-# OPTIONS --without-K --safe #-}

module Data.Binary.Views where

open import Relation.Binary.PropositionalEquality
open import Data.Binary.Definitions
open import Data.Binary.Operations.Unary
open import Data.Binary.Operations.Semantics
open import Data.Nat as ‚Ñï using (‚Ñï; suc; zero)
open import Data.Binary.Proofs.Unary
open import Function
open import Data.Empty

import Data.Nat.Properties as ‚Ñï-Prop

-- A "suc"-like view onto a binary number
data Suc-View : ùîπ ‚Üí Set where
  zero·µá : Suc-View 0‚ÇÇ
  suc·µá : ‚àÄ x ‚Üí Suc-View (inc x)

suc-view : ‚àÄ x ‚Üí Suc-View x
suc-view 0‚ÇÇ = zero·µá
suc-view (0< xs) = subst Suc-View (cong 0<_ (inc-dec xs)) (suc·µá (dec‚Å∫ xs))

‚ü¶x‚áì‚üß‚Å∫‚â¢0 : ‚àÄ x ‚Üí ‚ü¶ x ‚áì‚üß‚Å∫ ‚â¢ 0
‚ü¶x‚áì‚üß‚Å∫‚â¢0 x p with suc-view (0< x)
‚ü¶x‚áì‚üß‚Å∫‚â¢0 .(inc‚Å∫ x) p | suc·µá x with sym (inc-homo x) ‚ü® trans ‚ü© p
‚ü¶x‚áì‚üß‚Å∫‚â¢0 .(inc‚Å∫ x) p | suc·µá x | ()

-- Similar to the suc-like view as before, but also works as well-founded recursion
data Suc-Rec : ùîπ ‚Üí Set where
  zero ≥ : Suc-Rec 0‚ÇÇ
  suc ≥ : ‚àÄ x ‚Üí Suc-Rec x ‚Üí Suc-Rec (inc x)

suc-rec : ‚àÄ x ‚Üí Suc-Rec x
suc-rec x = go _ x (inspect ‚ü¶_‚áì‚üß x)
  where
  go : ‚àÄ n x ‚Üí Reveal ‚ü¶_‚áì‚üß ¬∑ x is n ‚Üí Suc-Rec x
  go n 0‚ÇÇ p = zero ≥
  go zero (0< x) [ p ] = ‚ä•-elim (‚ü¶x‚áì‚üß‚Å∫‚â¢0 x p)
  go (suc n) (0< xs) [ p ] = subst Suc-Rec (cong 0<_ (inc-dec xs)) (suc ≥ (dec‚Å∫ xs) (go n (dec‚Å∫ xs) [ ‚Ñï-Prop.suc-injective (sym (inc-homo (dec‚Å∫ xs)) ‚ü® trans ‚ü© cong ‚ü¶_‚áì‚üß‚Å∫ (inc-dec xs)  ‚ü® trans ‚ü© p) ]))
