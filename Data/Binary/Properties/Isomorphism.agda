{-# OPTIONS --cubical #-}

module Data.Binary.Properties.Isomorphism where

open import Data.Binary.Definition
open import Data.Binary.Conversion
open import Data.Binary.Increment
open import Data.Binary.Properties.Helpers
open import Data.Binary.Helpers
import Agda.Builtin.Nat as РёЋ

inc-suc : Рѕђ x Рєњ РЪд inc x РЄЊРЪД РЅА suc РЪд x РЄЊРЪД
inc-suc 0рхЄ     = refl
inc-suc (1рхЄ x) = refl
inc-suc (2рхЄ x) = cong (╬╗ r Рєњ suc (r РёЋ.* 2)) (inc-suc x)

inc-2*-1рхЄ : Рѕђ n Рєњ inc РЪд n РёЋ.* 2 РЄЉРЪД РЅА 1рхЄ РЪд n РЄЉРЪД
inc-2*-1рхЄ zero    = refl
inc-2*-1рхЄ (suc n) = cong (╬╗ r Рєњ inc (inc r)) (inc-2*-1рхЄ n)

РёЋРєњ­Юћ╣РєњРёЋ : Рѕђ x Рєњ РЪд РЪд x РЄЉРЪД РЄЊРЪД РЅА x
РёЋРєњ­Юћ╣РєњРёЋ zero    = refl
РёЋРєњ­Юћ╣РєњРёЋ (suc x) = inc-suc РЪд x РЄЉРЪД РѕЎ cong suc (РёЋРєњ­Юћ╣РєњРёЋ x)

­Юћ╣РєњРёЋРєњ­Юћ╣ : Рѕђ x Рєњ РЪд РЪд x РЄЊРЪД РЄЉРЪД РЅА x
­Юћ╣РєњРёЋРєњ­Юћ╣ 0рхЄ = refl
­Юћ╣РєњРёЋРєњ­Юћ╣ (1рхЄ x) =           inc-2*-1рхЄ РЪд x РЄЊРЪД  РѕЎ cong 1рхЄ_ (­Юћ╣РєњРёЋРєњ­Юћ╣ x)
­Юћ╣РєњРёЋРєњ­Юћ╣ (2рхЄ x) = cong inc (inc-2*-1рхЄ РЪд x РЄЊРЪД) РѕЎ cong 2рхЄ_ (­Юћ╣РєњРёЋРєњ­Юћ╣ x)

­Юћ╣РЄћРёЋ : Iso ­Юћ╣ РёЋ
­Юћ╣РЄћРёЋ .fun = РЪд_РЄЊРЪД
­Юћ╣РЄћРёЋ .inv = РЪд_РЄЉРЪД
­Юћ╣РЄћРёЋ .rightInv = РёЋРєњ­Юћ╣РєњРёЋ
­Юћ╣РЄћРёЋ .leftInv  = ­Юћ╣РєњРёЋРєњ­Юћ╣
